"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _jquery=_interopRequireDefault(require("jquery")),_util=_interopRequireDefault(require("./util"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{},l=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(l=l.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),l.forEach(function(e){_defineProperty(t,e,a[e])})}return t}function _defineProperty(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var a=0;a<t.length;a++){var l=t[a];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}function _createClass(e,t,a){return t&&_defineProperties(e.prototype,t),a&&_defineProperties(e,a),e}var NAME="collapse",VERSION="4.2.1",DATA_KEY="bs.collapse",EVENT_KEY=".".concat(DATA_KEY),DATA_API_KEY=".data-api",JQUERY_NO_CONFLICT=_jquery.default.fn[NAME],Default={toggle:!0,parent:""},DefaultType={toggle:"boolean",parent:"(string|element)"},Event={SHOW:"show".concat(EVENT_KEY),SHOWN:"shown".concat(EVENT_KEY),HIDE:"hide".concat(EVENT_KEY),HIDDEN:"hidden".concat(EVENT_KEY),CLICK_DATA_API:"click".concat(EVENT_KEY).concat(DATA_API_KEY)},ClassName={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},Dimension={WIDTH:"width",HEIGHT:"height"},Selector={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},Collapse=function(){function o(t,e){_classCallCheck(this,o),this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'.concat(t.id,'"],')+'[data-toggle="collapse"][data-target="#'.concat(t.id,'"]')));for(var a=[].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE)),l=0,n=a.length;l<n;l++){var r=a[l],i=_util.default.getSelectorFromElement(r),s=[].slice.call(document.querySelectorAll(i)).filter(function(e){return e===t});null!==i&&0<s.length&&(this._selector=i,this._triggerArray.push(r))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return _createClass(o,[{key:"toggle",value:function(){(0,_jquery.default)(this._element).hasClass(ClassName.SHOW)?this.hide():this.show()}},{key:"show",value:function(){var e,t,a=this;if(!this._isTransitioning&&!(0,_jquery.default)(this._element).hasClass(ClassName.SHOW)&&(this._parent&&0===(e=[].slice.call(this._parent.querySelectorAll(Selector.ACTIVES)).filter(function(e){return"string"==typeof a._config.parent?e.getAttribute("data-parent")===a._config.parent:e.classList.contains(ClassName.COLLAPSE)})).length&&(e=null),!(e&&(t=(0,_jquery.default)(e).not(this._selector).data(DATA_KEY))&&t._isTransitioning))){var l=_jquery.default.Event(Event.SHOW);if((0,_jquery.default)(this._element).trigger(l),!l.isDefaultPrevented()){e&&(o._jQueryInterface.call((0,_jquery.default)(e).not(this._selector),"hide"),t||(0,_jquery.default)(e).data(DATA_KEY,null));var n=this._getDimension();(0,_jquery.default)(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING),this._element.style[n]=0,this._triggerArray.length&&(0,_jquery.default)(this._triggerArray).removeClass(ClassName.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var r=n[0].toUpperCase()+n.slice(1),i="scroll".concat(r),s=_util.default.getTransitionDurationFromElement(this._element);(0,_jquery.default)(this._element).one(_util.default.TRANSITION_END,function(){(0,_jquery.default)(a._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW),a._element.style[n]="",a.setTransitioning(!1),(0,_jquery.default)(a._element).trigger(Event.SHOWN)}).emulateTransitionEnd(s),this._element.style[n]="".concat(this._element[i],"px")}}}},{key:"hide",value:function(){var e=this;if(!this._isTransitioning&&(0,_jquery.default)(this._element).hasClass(ClassName.SHOW)){var t=_jquery.default.Event(Event.HIDE);if((0,_jquery.default)(this._element).trigger(t),!t.isDefaultPrevented()){var a=this._getDimension();this._element.style[a]="".concat(this._element.getBoundingClientRect()[a],"px"),_util.default.reflow(this._element),(0,_jquery.default)(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);var l=this._triggerArray.length;if(0<l)for(var n=0;n<l;n++){var r=this._triggerArray[n],i=_util.default.getSelectorFromElement(r);if(null!==i)(0,_jquery.default)([].slice.call(document.querySelectorAll(i))).hasClass(ClassName.SHOW)||(0,_jquery.default)(r).addClass(ClassName.COLLAPSED).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[a]="";var s=_util.default.getTransitionDurationFromElement(this._element);(0,_jquery.default)(this._element).one(_util.default.TRANSITION_END,function(){e.setTransitioning(!1),(0,_jquery.default)(e._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN)}).emulateTransitionEnd(s)}}}},{key:"setTransitioning",value:function(e){this._isTransitioning=e}},{key:"dispose",value:function(){_jquery.default.removeData(this._element,DATA_KEY),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null}},{key:"_getConfig",value:function(e){return(e=_objectSpread({},Default,e)).toggle=Boolean(e.toggle),_util.default.typeCheckConfig(NAME,e,DefaultType),e}},{key:"_getDimension",value:function(){return(0,_jquery.default)(this._element).hasClass(Dimension.WIDTH)?Dimension.WIDTH:Dimension.HEIGHT}},{key:"_getParent",value:function(){var e,a=this;_util.default.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=document.querySelector(this._config.parent);var t='[data-toggle="collapse"][data-parent="'.concat(this._config.parent,'"]'),l=[].slice.call(e.querySelectorAll(t));return(0,_jquery.default)(l).each(function(e,t){a._addAriaAndCollapsedClass(o._getTargetFromElement(t),[t])}),e}},{key:"_addAriaAndCollapsedClass",value:function(e,t){var a=(0,_jquery.default)(e).hasClass(ClassName.SHOW);t.length&&(0,_jquery.default)(t).toggleClass(ClassName.COLLAPSED,!a).attr("aria-expanded",a)}}],[{key:"_getTargetFromElement",value:function(e){var t=_util.default.getSelectorFromElement(e);return t?document.querySelector(t):null}},{key:"_jQueryInterface",value:function(l){return this.each(function(){var e=(0,_jquery.default)(this),t=e.data(DATA_KEY),a=_objectSpread({},Default,e.data(),"object"===_typeof(l)&&l?l:{});if(!t&&a.toggle&&/show|hide/.test(l)&&(a.toggle=!1),t||(t=new o(this,a),e.data(DATA_KEY,t)),"string"==typeof l){if(void 0===t[l])throw new TypeError('No method named "'.concat(l,'"'));t[l]()}})}},{key:"VERSION",get:function(){return VERSION}},{key:"Default",get:function(){return Default}}]),o}();(0,_jquery.default)(document).on(Event.CLICK_DATA_API,Selector.DATA_TOGGLE,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var a=(0,_jquery.default)(this),t=_util.default.getSelectorFromElement(this),l=[].slice.call(document.querySelectorAll(t));(0,_jquery.default)(l).each(function(){var e=(0,_jquery.default)(this),t=e.data(DATA_KEY)?"toggle":a.data();Collapse._jQueryInterface.call(e,t)})}),_jquery.default.fn[NAME]=Collapse._jQueryInterface,_jquery.default.fn[NAME].Constructor=Collapse,_jquery.default.fn[NAME].noConflict=function(){return _jquery.default.fn[NAME]=JQUERY_NO_CONFLICT,Collapse._jQueryInterface};var _default=Collapse;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
