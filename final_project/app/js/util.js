"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _jquery=_interopRequireDefault(require("jquery"));function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}var TRANSITION_END="transitionend",MAX_UID=1e6,MILLISECONDS_MULTIPLIER=1e3;function toType(t){return{}.toString.call(t).match(/\s([a-z]+)/i)[1].toLowerCase()}function getSpecialTransitionEndEvent(){return{bindType:TRANSITION_END,delegateType:TRANSITION_END,handle:function(t){if((0,_jquery.default)(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}}function transitionEndEmulator(t){var e=this,n=!1;return(0,_jquery.default)(this).one(Util.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||Util.triggerTransitionEnd(e)},t),this}function setTransitionEndSupport(){_jquery.default.fn.emulateTransitionEnd=transitionEndEmulator,_jquery.default.event.special[Util.TRANSITION_END]=getSpecialTransitionEndEvent()}var Util={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(Math.random()*MAX_UID),document.getElementById(t););return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");if(!e||"#"===e){var n=t.getAttribute("href");e=n&&"#"!==n?n.trim():""}return e&&document.querySelector(e)?e:null},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=(0,_jquery.default)(t).css("transition-duration"),n=(0,_jquery.default)(t).css("transition-delay"),r=parseFloat(e),o=parseFloat(n);return r||o?(e=e.split(",")[0],n=n.split(",")[0],(parseFloat(e)+parseFloat(n))*MILLISECONDS_MULTIPLIER):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){(0,_jquery.default)(t).trigger(TRANSITION_END)},supportsTransitionEnd:function(){return Boolean(TRANSITION_END)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var o=n[r],i=e[r],a=i&&Util.isElement(i)?"element":toType(i);if(!new RegExp(o).test(a))throw new Error("".concat(t.toUpperCase(),": ")+'Option "'.concat(r,'" provided type "').concat(a,'" ')+'but expected type "'.concat(o,'".'))}},findShadowRoot:function(t){if(!document.documentElement.attachShadow)return null;if("function"!=typeof t.getRootNode)return t instanceof ShadowRoot?t:t.parentNode?Util.findShadowRoot(t.parentNode):null;var e=t.getRootNode();return e instanceof ShadowRoot?e:null}};setTransitionEndSupport();var _default=Util;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
