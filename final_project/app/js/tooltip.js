"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _jquery=_interopRequireDefault(require("jquery")),_popper=_interopRequireDefault(require("popper.js")),_util=_interopRequireDefault(require("./util"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.forEach(function(e){_defineProperty(t,e,n[e])})}return t}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var NAME="tooltip",VERSION="4.2.1",DATA_KEY="bs.tooltip",EVENT_KEY=".".concat(DATA_KEY),JQUERY_NO_CONFLICT=_jquery.default.fn[NAME],CLASS_PREFIX="bs-tooltip",BSCLS_PREFIX_REGEX=new RegExp("(^|\\s)".concat(CLASS_PREFIX,"\\S+"),"g"),DefaultType={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},AttachmentMap={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},Default={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},HoverState={SHOW:"show",OUT:"out"},Event={HIDE:"hide".concat(EVENT_KEY),HIDDEN:"hidden".concat(EVENT_KEY),SHOW:"show".concat(EVENT_KEY),SHOWN:"shown".concat(EVENT_KEY),INSERTED:"inserted".concat(EVENT_KEY),CLICK:"click".concat(EVENT_KEY),FOCUSIN:"focusin".concat(EVENT_KEY),FOCUSOUT:"focusout".concat(EVENT_KEY),MOUSEENTER:"mouseenter".concat(EVENT_KEY),MOUSELEAVE:"mouseleave".concat(EVENT_KEY)},ClassName={FADE:"fade",SHOW:"show"},Selector={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},Trigger={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},Tooltip=function(){function i(e,t){if(_classCallCheck(this,i),void 0===_popper.default)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}return _createClass(i,[{key:"enable",value:function(){this._isEnabled=!0}},{key:"disable",value:function(){this._isEnabled=!1}},{key:"toggleEnabled",value:function(){this._isEnabled=!this._isEnabled}},{key:"toggle",value:function(e){if(this._isEnabled)if(e){var t=this.constructor.DATA_KEY,n=(0,_jquery.default)(e.currentTarget).data(t);n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),(0,_jquery.default)(e.currentTarget).data(t,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if((0,_jquery.default)(this.getTipElement()).hasClass(ClassName.SHOW))return void this._leave(null,this);this._enter(null,this)}}},{key:"dispose",value:function(){clearTimeout(this._timeout),_jquery.default.removeData(this.element,this.constructor.DATA_KEY),(0,_jquery.default)(this.element).off(this.constructor.EVENT_KEY),(0,_jquery.default)(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&(0,_jquery.default)(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null}},{key:"show",value:function(){var t=this;if("none"===(0,_jquery.default)(this.element).css("display"))throw new Error("Please use show on visible elements");var e=_jquery.default.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){(0,_jquery.default)(this.element).trigger(e);var n=_util.default.findShadowRoot(this.element),i=_jquery.default.contains(null!==n?n:this.element.ownerDocument.documentElement,this.element);if(e.isDefaultPrevented()||!i)return;var r=this.getTipElement(),o=_util.default.getUID(this.constructor.NAME);r.setAttribute("id",o),this.element.setAttribute("aria-describedby",o),this.setContent(),this.config.animation&&(0,_jquery.default)(r).addClass(ClassName.FADE);var a="function"==typeof this.config.placement?this.config.placement.call(this,r,this.element):this.config.placement,l=this._getAttachment(a);this.addAttachmentClass(l);var u=this._getContainer();(0,_jquery.default)(r).data(this.constructor.DATA_KEY,this),_jquery.default.contains(this.element.ownerDocument.documentElement,this.tip)||(0,_jquery.default)(r).appendTo(u),(0,_jquery.default)(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new _popper.default(this.element,r,{placement:l,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:Selector.ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){return t._handlePopperPlacementChange(e)}}),(0,_jquery.default)(r).addClass(ClassName.SHOW),"ontouchstart"in document.documentElement&&(0,_jquery.default)(document.body).children().on("mouseover",null,_jquery.default.noop);var s=function(){t.config.animation&&t._fixTransition();var e=t._hoverState;t._hoverState=null,(0,_jquery.default)(t.element).trigger(t.constructor.Event.SHOWN),e===HoverState.OUT&&t._leave(null,t)};if((0,_jquery.default)(this.tip).hasClass(ClassName.FADE)){var c=_util.default.getTransitionDurationFromElement(this.tip);(0,_jquery.default)(this.tip).one(_util.default.TRANSITION_END,s).emulateTransitionEnd(c)}else s()}}},{key:"hide",value:function(e){var t=this,n=this.getTipElement(),i=_jquery.default.Event(this.constructor.Event.HIDE),r=function(){t._hoverState!==HoverState.SHOW&&n.parentNode&&n.parentNode.removeChild(n),t._cleanTipClass(),t.element.removeAttribute("aria-describedby"),(0,_jquery.default)(t.element).trigger(t.constructor.Event.HIDDEN),null!==t._popper&&t._popper.destroy(),e&&e()};if((0,_jquery.default)(this.element).trigger(i),!i.isDefaultPrevented()){if((0,_jquery.default)(n).removeClass(ClassName.SHOW),"ontouchstart"in document.documentElement&&(0,_jquery.default)(document.body).children().off("mouseover",null,_jquery.default.noop),this._activeTrigger[Trigger.CLICK]=!1,this._activeTrigger[Trigger.FOCUS]=!1,this._activeTrigger[Trigger.HOVER]=!1,(0,_jquery.default)(this.tip).hasClass(ClassName.FADE)){var o=_util.default.getTransitionDurationFromElement(n);(0,_jquery.default)(n).one(_util.default.TRANSITION_END,r).emulateTransitionEnd(o)}else r();this._hoverState=""}}},{key:"update",value:function(){null!==this._popper&&this._popper.scheduleUpdate()}},{key:"isWithContent",value:function(){return Boolean(this.getTitle())}},{key:"addAttachmentClass",value:function(e){(0,_jquery.default)(this.getTipElement()).addClass("".concat(CLASS_PREFIX,"-").concat(e))}},{key:"getTipElement",value:function(){return this.tip=this.tip||(0,_jquery.default)(this.config.template)[0],this.tip}},{key:"setContent",value:function(){var e=this.getTipElement();this.setElementContent((0,_jquery.default)(e.querySelectorAll(Selector.TOOLTIP_INNER)),this.getTitle()),(0,_jquery.default)(e).removeClass("".concat(ClassName.FADE," ").concat(ClassName.SHOW))}},{key:"setElementContent",value:function(e,t){var n=this.config.html;"object"===_typeof(t)&&(t.nodeType||t.jquery)?n?(0,_jquery.default)(t).parent().is(e)||e.empty().append(t):e.text((0,_jquery.default)(t).text()):e[n?"html":"text"](t)}},{key:"getTitle",value:function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e}},{key:"_getContainer",value:function(){return!1===this.config.container?document.body:_util.default.isElement(this.config.container)?(0,_jquery.default)(this.config.container):(0,_jquery.default)(document).find(this.config.container)}},{key:"_getAttachment",value:function(e){return AttachmentMap[e.toUpperCase()]}},{key:"_setListeners",value:function(){var i=this;this.config.trigger.split(" ").forEach(function(e){if("click"===e)(0,_jquery.default)(i.element).on(i.constructor.Event.CLICK,i.config.selector,function(e){return i.toggle(e)});else if(e!==Trigger.MANUAL){var t=e===Trigger.HOVER?i.constructor.Event.MOUSEENTER:i.constructor.Event.FOCUSIN,n=e===Trigger.HOVER?i.constructor.Event.MOUSELEAVE:i.constructor.Event.FOCUSOUT;(0,_jquery.default)(i.element).on(t,i.config.selector,function(e){return i._enter(e)}).on(n,i.config.selector,function(e){return i._leave(e)})}}),(0,_jquery.default)(this.element).closest(".modal").on("hide.bs.modal",function(){i.element&&i.hide()}),this.config.selector?this.config=_objectSpread({},this.config,{trigger:"manual",selector:""}):this._fixTitle()}},{key:"_fixTitle",value:function(){var e=_typeof(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))}},{key:"_enter",value:function(e,t){var n=this.constructor.DATA_KEY;(t=t||(0,_jquery.default)(e.currentTarget).data(n))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),(0,_jquery.default)(e.currentTarget).data(n,t)),e&&(t._activeTrigger["focusin"===e.type?Trigger.FOCUS:Trigger.HOVER]=!0),(0,_jquery.default)(t.getTipElement()).hasClass(ClassName.SHOW)||t._hoverState===HoverState.SHOW?t._hoverState=HoverState.SHOW:(clearTimeout(t._timeout),t._hoverState=HoverState.SHOW,t.config.delay&&t.config.delay.show?t._timeout=setTimeout(function(){t._hoverState===HoverState.SHOW&&t.show()},t.config.delay.show):t.show())}},{key:"_leave",value:function(e,t){var n=this.constructor.DATA_KEY;(t=t||(0,_jquery.default)(e.currentTarget).data(n))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),(0,_jquery.default)(e.currentTarget).data(n,t)),e&&(t._activeTrigger["focusout"===e.type?Trigger.FOCUS:Trigger.HOVER]=!1),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=HoverState.OUT,t.config.delay&&t.config.delay.hide?t._timeout=setTimeout(function(){t._hoverState===HoverState.OUT&&t.hide()},t.config.delay.hide):t.hide())}},{key:"_isWithActiveTrigger",value:function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1}},{key:"_getConfig",value:function(e){return"number"==typeof(e=_objectSpread({},this.constructor.Default,(0,_jquery.default)(this.element).data(),"object"===_typeof(e)&&e?e:{})).delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),_util.default.typeCheckConfig(NAME,e,this.constructor.DefaultType),e}},{key:"_getDelegateConfig",value:function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e}},{key:"_cleanTipClass",value:function(){var e=(0,_jquery.default)(this.getTipElement()),t=e.attr("class").match(BSCLS_PREFIX_REGEX);null!==t&&t.length&&e.removeClass(t.join(""))}},{key:"_handlePopperPlacementChange",value:function(e){var t=e.instance;this.tip=t.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))}},{key:"_fixTransition",value:function(){var e=this.getTipElement(),t=this.config.animation;null===e.getAttribute("x-placement")&&((0,_jquery.default)(e).removeClass(ClassName.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=t)}}],[{key:"_jQueryInterface",value:function(n){return this.each(function(){var e=(0,_jquery.default)(this).data(DATA_KEY),t="object"===_typeof(n)&&n;if((e||!/dispose|hide/.test(n))&&(e||(e=new i(this,t),(0,_jquery.default)(this).data(DATA_KEY,e)),"string"==typeof n)){if(void 0===e[n])throw new TypeError('No method named "'.concat(n,'"'));e[n]()}})}},{key:"VERSION",get:function(){return VERSION}},{key:"Default",get:function(){return Default}},{key:"NAME",get:function(){return NAME}},{key:"DATA_KEY",get:function(){return DATA_KEY}},{key:"Event",get:function(){return Event}},{key:"EVENT_KEY",get:function(){return EVENT_KEY}},{key:"DefaultType",get:function(){return DefaultType}}]),i}();_jquery.default.fn[NAME]=Tooltip._jQueryInterface,_jquery.default.fn[NAME].Constructor=Tooltip,_jquery.default.fn[NAME].noConflict=function(){return _jquery.default.fn[NAME]=JQUERY_NO_CONFLICT,Tooltip._jQueryInterface};var _default=Tooltip;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
